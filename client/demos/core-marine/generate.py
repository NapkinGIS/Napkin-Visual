# /*©agpl*************************************************************************
# *                                                                              *
# * Napkin Visual – Visualisation platform for the Napkin platform               *
# * Copyright (C) 2020  Napkin AS                                                *
# *                                                                              *
# * This program is free software: you can redistribute it and/or modify         *
# * it under the terms of the GNU Affero General Public License as published by  *
# * the Free Software Foundation, either version 3 of the License, or            *
# * (at your option) any later version.                                          *
# *                                                                              *
# * This program is distributed in the hope that it will be useful,              *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of               *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                 *
# * GNU Affero General Public License for more details.                          *
# *                                                                              *
# * You should have received a copy of the GNU Affero General Public License     *
# * along with this program. If not, see <http://www.gnu.org/licenses/>.         *
# *                                                                              *
# *****************************************************************************©*/

import json
from datetime import datetime


lrange = lambda a,b : range(a, b+1)

COORDS = [
	[5.116367340087891,60.073319947307546],[5.1148223876953125,60.07400506321453],[5.113620758056641,60.07451889080531],[5.112419128417969,60.07511834621021],[5.110874176025391,60.07580342475969],[5.109844207763672,60.07640285681655],[5.108642578125,60.07700227797792],[5.107612609863281,60.07777294631865],[5.106239318847656,60.07888610212573],[5.105552673339844,60.07922860404502],[5.104179382324219,60.079827973843486],[5.102291107177734,60.080341710713675],[5.0995445251464835,60.08102668075622],[5.09765625,60.08128354085362],[5.095252990722656,60.0813691604414],[5.0921630859375,60.081882873299115],[5.090618133544922,60.08222534409093],[5.089759826660155,60.08265342757821],[5.087528228759766,60.08316712042611],[5.0844383239746085,60.08359519168533],[5.081520080566405,60.08402325738645],[5.079631805419922,60.08445131752948],[5.07568359375,60.084365705945494],[5.073966979980469,60.08479376164208],[5.071220397949219,60.08547863919598],[5.068817138671874,60.08650592884889],[5.06641387939453,60.08727637508001],[5.064697265625,60.088303608710646],[5.063667297363281,60.089074012925856],[5.0626373291015625,60.09121393015786],[5.06195068359375,60.09292576391223],[5.062294006347656,60.09420958087845],[5.0626373291015625,60.09566451298078],[5.063323974609375,60.09660590540541],[5.0640106201171875,60.097889579006136],[5.063495635986327,60.09985778139974],[5.062294006347656,60.10131246412468],[5.06195068359375,60.10208256427036],[5.061092376708984,60.10293820998591],[5.059375762939453,60.1041360766518],[5.057659149169922,60.10507722704649],[5.055599212646484,60.10567612693362],[5.054054260253906,60.1061894610272],[5.051994323730469,60.106873894040824],[5.048561096191406,60.10704500007203],[5.046672821044922,60.10704500007203],[5.042552947998047,60.106959447167526],[5.0392913818359375,60.106959447167526],[5.0372314453125,60.10730165745217],[5.034999847412109,60.10824271740194],[5.032768249511718,60.10926929759072],[5.0310516357421875,60.11012475663832],[5.030879974365234,60.1112368201805],[5.030879974365234,60.11251992375937],[5.030879974365234,60.11397404737855],[5.031394958496094,60.11551363769197],[5.031223297119141,60.117480787223144],[5.030021667480469,60.11884916975285],[5.02899169921875,60.1203030138731],[5.028476715087891,60.121414733702636],[5.028476715087891,60.12303948745721],[5.028820037841797,60.12466416101662],[5.02899169921875,60.127143771314636],[5.029163360595703,60.12834075770064],[5.029506683349609,60.12970868883226],[5.029506683349609,60.130820091007536],[5.029335021972655,60.13193145564591],[5.029163360595703,60.133470206254394],[5.028820037841797,60.13389762420812],[5.028648376464844,60.13560724049903],[5.028476715087891,60.136547491592395],[5.0262451171875,60.138086026326405],[5.0241851806640625,60.13919714555188],[5.021781921386719,60.13953902083992],[5.016117095947266,60.139795424974196],[5.012683868408203,60.13970995715149],[5.0090789794921875,60.13970995715149],[5.005817413330078,60.139368083640036],[5.002384185791016,60.13894073675407],[4.998607635498047,60.138171498368514],[4.99603271484375,60.137316767953756],[4.994144439697266,60.136632967631996],[4.991397857666016,60.13492340464317],[4.990367889404296,60.13364117410219],[4.990196228027344,60.132187919078014],[4.9898529052734375,60.13073459986521],[4.989509582519531,60.12936671138023],[4.987621307373047,60.127827768866226],[4.985561370849609,60.126716265625724],[4.982471466064453,60.12594674139142],[4.980411529541016,60.125604724845154],[4.978351593017578,60.125262704744706],[4.975433349609375,60.124920681090074],[4.971828460693359,60.124578653881215],[4.966850280761719,60.123809079666025],[4.964275360107422,60.12363806073021],[4.9610137939453125,60.123894588800724],[4.958095550537109,60.12466416101662],[4.953632354736328,60.12534821010302],[4.950199127197266,60.12620325146872]
]

def main():
	with open('ship.geojson', mode='w') as outfile:
		out = {
			"type": "FeatureCollection",
			"features": [
				{
					"type": "Feature",
					"properties": {
						"Speed": "5.8kn",
						"Heading": "-33.52°",
						"Roll (min,max)": "-4.02°  0.22°",
						"Pitch (min,max)": "0.64°  0.88°",
						"Heave (min,max)": "-0.88m  0.12m",
						"Wind": "3.91kn  265.85°",
						"Temperature": "5.1°C",
						"Wave height": "1.5m",
						"Wave direction": "315.01°"
					},
					"geometry": {
						"type": "LineString",
						"coordinates": []
					}
				}
			]
		}
		coords = []

		h = 12; m = 0
		for c in COORDS:
			m += 1
			if m >= 60: h += 1; m = 0

			hour = f'0{h}' if len(str(h)) < 2 else f'{h}'
			minute = f'0{m}' if len(str(m)) < 2 else f'{m}'

			lat = c[0]; lng = c[1]
			timestamp = f'2020-09-30 {hour}:{minute}:00 +00:00'

			coords.append( [lat, lng, 0, timestamp] )

		out['features'][0]['geometry']['coordinates'] = coords

		json.dump(out, outfile)

if __name__ == '__main__':
	main()
